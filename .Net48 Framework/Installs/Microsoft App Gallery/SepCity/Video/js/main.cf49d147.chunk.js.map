{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Video","require","createLocalVideoTrack","participantConnected","participant","console","log","identity","div","document","createElement","id","sid","innerText","on","track","trackSubscribed","trackUnsubscribed","tracks","forEach","publication","isSubscribed","userDiv","className","setAttribute","appendChild","getElementById","participantDisconnected","remove","attach","detach","element","App","then","previewDiv","connect","value","name","type","room","participants","once","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"kJAEMA,EAAQC,EAAQ,IACdC,EAA0BD,EAAQ,IAAlCC,sBAgCR,SAASC,EAAqBC,GAC5BC,QAAQC,IAAI,6BAA8BF,EAAYG,UAEtD,IAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIG,GAAKP,EAAYQ,IACrBJ,EAAIK,UAAYT,EAAYG,SAE5BH,EAAYU,GAAG,mBAAmB,SAAAC,GAAK,OAAIC,EAAgBR,EAAKO,MAChEX,EAAYU,GAAG,oBAAqBG,GAEpCb,EAAYc,OAAOC,SAAQ,SAAAC,GACrBA,EAAYC,cACdL,EAAgBR,EAAKY,EAAYL,UAIrC,IAAIO,EAAUb,SAASC,cAAc,OACrCY,EAAQC,UAAY,WACpBD,EAAQE,aAAa,KAAM,gBAC3BF,EAAQG,YAAYjB,GACpBC,SAASiB,eAAe,QAAQD,YAAYH,GAG9C,SAASK,EAAwBvB,GAC/BC,QAAQC,IAAI,gCAAiCF,EAAYG,UACzDE,SAASiB,eAAetB,EAAYQ,KAAKgB,SAG3C,SAASZ,EAAgBR,EAAKO,GAC5BP,EAAIiB,YAAYV,EAAMc,UAGxB,SAASZ,EAAkBF,GACzBA,EAAMe,SAASX,SAAQ,SAAAY,GAAO,OAAIA,EAAQH,YAG7BI,MAlEf,WAoBE,OAlBA9B,IAAwB+B,MAAK,SAAAlB,GAC3B,IAAImB,EAAazB,SAASC,cAAc,OACxCwB,EAAWX,UAAY,WACvBW,EAAWrB,UAAY,gBACvBqB,EAAWV,aAAa,KAAM,mBAC9BU,EAAWT,YAAYV,EAAMc,UAC7BpB,SAASiB,eAAe,QAAQD,YAAYS,MAG9ClC,EAAMmC,QAgBC1B,SAASiB,eAAe,YAAYU,MAhBX,CAAEC,KAAM,YAAaC,KAAM,iBAAkBL,MAAK,SAAAM,GAChFlC,QAAQC,IAAI,yBAA0BiC,EAAKF,MAE3CE,EAAKC,aAAarB,QAAQhB,GAC1BoC,EAAKzB,GAAG,uBAAwBX,GAEhCoC,EAAKzB,GAAG,0BAA2Ba,GACnCY,EAAKE,KAAK,gBAAgB,SAAAC,GAAK,OAAIH,EAAKC,aAAarB,QAAQQ,SAG7D,+BCdgBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAASiB,eAAe,SD0HpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAd,GACLrC,QAAQqC,MAAMA,EAAMe,a","file":"static/js/main.cf49d147.chunk.js","sourcesContent":["import React from 'react';\n\nconst Video = require('twilio-video');\nconst { createLocalVideoTrack } = require('twilio-video');\n\nfunction App() {\n\n  createLocalVideoTrack().then(track => {\n    var previewDiv = document.createElement('div');\n    previewDiv.className = 'col-md-6';\n    previewDiv.innerText = \"Video Preview\";\n    previewDiv.setAttribute('id', 'previewVideoDiv');\n    previewDiv.appendChild(track.attach());\n    document.getElementById('root').appendChild(previewDiv);\n  });\n\n  Video.connect(getAccessToken(), { name: 'room-name', type: 'peer-to-peer' }).then(room => {\n    console.log('Connected to Room \"%s\"', room.name);\n   \n    room.participants.forEach(participantConnected);\n    room.on('participantConnected', participantConnected);\n   \n    room.on('participantDisconnected', participantDisconnected);\n    room.once('disconnected', error => room.participants.forEach(participantDisconnected));\n  });\n  return (\n    <div>\n    </div>\n  );\n}\n\nfunction getAccessToken() {\n  return document.getElementById('UniqueID').value;\n}\n\nfunction participantConnected(participant) {\n  console.log('Participant \"%s\" connected', participant.identity);\n \n  const div = document.createElement('div');\n  div.id = participant.sid;\n  div.innerText = participant.identity;\n \n  participant.on('trackSubscribed', track => trackSubscribed(div, track));\n  participant.on('trackUnsubscribed', trackUnsubscribed);\n \n  participant.tracks.forEach(publication => {\n    if (publication.isSubscribed) {\n      trackSubscribed(div, publication.track);\n    }\n  });\n\n  var userDiv = document.createElement('div');\n  userDiv.className = 'col-md-6';\n  userDiv.setAttribute('id', 'userVideoDiv');\n  userDiv.appendChild(div);\n  document.getElementById('root').appendChild(userDiv);\n}\n \nfunction participantDisconnected(participant) {\n  console.log('Participant \"%s\" disconnected', participant.identity);\n  document.getElementById(participant.sid).remove();\n}\n \nfunction trackSubscribed(div, track) {\n  div.appendChild(track.attach());\n}\n \nfunction trackUnsubscribed(track) {\n  track.detach().forEach(element => element.remove());\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}